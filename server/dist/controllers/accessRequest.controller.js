"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteAccessRequestByIdController = exports.updateAccessRequestController = exports.getAccessRequestsController = exports.getAccessRequestByUserIdController = exports.getAccessRequestByIdController = exports.createAccessRequestController = void 0;
const accessRequest_service_1 = require("../services/accessRequest.service");
// Controller function to create an access re8quest
const createAccessRequestController = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { file_id, reason } = req.body;
        const user_id = Number(req.user_id);
        // Check if required fields are provided
        if (!file_id || !user_id || !reason) {
            return res
                .status(400)
                .json({ message: "user_id,file_id and reason are required" });
        }
        // Create access request object
        const newAccessRequest = {
            id: 1, // Assuming the ID is autogenerated in the database
            file_id,
            user_id,
            status: false,
            reason,
        };
        // Call the service function to create access request
        yield (0, accessRequest_service_1.createAccessRequest)(newAccessRequest);
        res.status(201).json({ message: "Access request created successfully" });
    }
    catch (error) {
        console.error("Error creating access request:", error);
        res.status(500).json({ message: "Internal server error" });
    }
});
exports.createAccessRequestController = createAccessRequestController;
// Controller function to get access request by ID
const getAccessRequestByIdController = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const requestId = parseInt(req.params.id, 10);
        // Call the service function to get access request by ID
        const accessRequest = yield (0, accessRequest_service_1.getAccessRequestById)(requestId);
        if (!accessRequest) {
            return res.status(404).json({ message: "Access request not found" });
        }
        res.status(200).json(accessRequest);
    }
    catch (error) {
        console.error("Error fetching access request by ID:", error);
        res.status(500).json({ message: "Internal server error" });
    }
});
exports.getAccessRequestByIdController = getAccessRequestByIdController;
// Controller function to get access request by ID
const getAccessRequestByUserIdController = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const userId = Number(req.user_id);
        // Call the service function to get access request by ID
        const accessRequest = yield (0, accessRequest_service_1.getAccessRequestByUserId)(userId);
        if (!accessRequest) {
            return res.status(404).json({ message: "Access request not found" });
        }
        res.status(200).json(accessRequest);
    }
    catch (error) {
        console.error("Error fetching access request by ID:", error);
        res.status(500).json({ message: "Internal server error" });
    }
});
exports.getAccessRequestByUserIdController = getAccessRequestByUserIdController;
// Controller function to get access request by ID
const getAccessRequestsController = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        // Call the service function to get access request by ID
        const accessRequests = yield (0, accessRequest_service_1.getAccessRequests)();
        if (!accessRequests) {
            return res.status(404).json({ message: "Access request not found" });
        }
        res.status(200).json(accessRequests);
    }
    catch (error) {
        console.error("Error fetching access request by ID:", error);
        res.status(500).json({ message: "Internal server error" });
    }
});
exports.getAccessRequestsController = getAccessRequestsController;
// Controller function to update access request
const updateAccessRequestController = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const requestId = parseInt(req.params.id, 10);
        const { file_id, user_id, status, reason } = req.body;
        console.log(file_id, user_id, status, reason);
        // Check if required fields are provided
        if (!file_id || typeof status !== "boolean" || !reason) {
            return res
                .status(400)
                .json({ message: "File ID, status, and reason are required" });
        }
        // Create access request object
        const updatedAccessRequest = {
            id: requestId,
            file_id,
            user_id,
            status,
            reason,
        };
        // Call the service function to update access request
        yield (0, accessRequest_service_1.updateAccessRequest)(requestId, updatedAccessRequest);
        res.status(200).json({ message: "Access request updated successfully" });
    }
    catch (error) {
        console.error("Error updating access request:", error);
        res.status(500).json({ message: "Internal server error" });
    }
});
exports.updateAccessRequestController = updateAccessRequestController;
// Controller function to delete access request by ID
const deleteAccessRequestByIdController = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const requestId = parseInt(req.params.id, 10);
        // Call the service function to delete access request by ID
        yield (0, accessRequest_service_1.deleteAccessRequestById)(requestId);
        res.status(200).json({ message: "Access request deleted successfully" });
    }
    catch (error) {
        console.error("Error deleting access request:", error);
        res.status(500).json({ message: "Internal server error" });
    }
});
exports.deleteAccessRequestByIdController = deleteAccessRequestByIdController;
