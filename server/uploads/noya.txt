Rather, it is the same, and if it is not a denial of the Promised Messiah, then thanks be to Allah, the Holy Prophet is also not a disbeliever, because
it is equally possible that your denial in the first mission is disbelief, and in the second mission, in which the Promised
Messiah will become you. His spirituality is powerful and complete and effective, so don't deny your disbelief.

March 1906: God has revealed to me that every person to whom my invitation has reached
And he did not accept me, he is not a Muslim and is impeachable in the sight of God.
Letter to Dr. Abd al-Hakim Mureed) Reference Page 519 Volume IV


We give you good news of a voluntary child for you.
It is possible that it is interpreted as a boy because Nafir is also called a grandson or Bisharat at another time
Pause? It was temporary
Eider, volume 2, news, 13 cases in April, referring to page 2, Al-Hakm, volume Amir, 12, dated in April, page 2)
March
God Almighty has revealed that My invitation has reached one person and that is him
He did not accept me. He is not a Muslim and is impeachable in the sight of God.
Written in the name of Dr. Abdul Hakeem Murqad The following Risalah Al-Zhikr Al-Hakim number this page 22 times Dr. Abdul Aleem Murtad Afzal Ala
No. 85 dated January 15 and page)
Allah has delayed it until the appointed time.
In Al-Hikam, I will show you fifty or so signs in these words
Translation from Al-Masam: "We give you good tidings of a boy who will be your grandson?"