import { Request, Response } from 'express';
import { FileAccess } from '../models/FileAccess';
import {
  createFileAccess,
  getFileAccessById,
  getFileAccessByFileId,
  updateFileAccess,
  deleteFileAccessById,
} from '../services/fileAccess.service';

// Controller function to create file access
const createFileAccessController = async (req: Request, res: Response) => {
  try {
    const { file_id, user_id, can_read, can_write, can_delete } = req.body;

    // Check if required fields are provided
    if (!file_id || !user_id || typeof can_read !== 'boolean' || typeof can_write !== 'boolean' || typeof can_delete !== 'boolean') {
      return res.status(400).json({ message: 'File ID, user ID, can_read, can_write, and can_delete are required' });
    }

    // Create file access object
    const newFileAccess: FileAccess = {
      id: 1, // Assuming the ID is autogenerated in the database
      file_id,
      user_id,
      can_read,
      can_write,
      can_delete,
    };

    // Call the service function to create file access
    await createFileAccess(newFileAccess);

    res.status(201).json({ message: 'File access created successfully' });
  } catch (error) {
    console.error('Error creating file access:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};

// Controller function to get file access by ID
const getFileAccessByIdController = async (req: Request, res: Response) => {
  try {
    const fileId: number = parseInt(req.params.id, 10);

    // Call the service function to get file access by ID
    const fileAccess = await getFileAccessById(fileId);

    if (!fileAccess) {
      return res.status(404).json({ message: 'File access not found' });
    }

    res.status(200).json(fileAccess);
  } catch (error) {
    console.error('Error fetching file access by ID:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};

// Controller function to get file access by file ID
const getFileAccessByFileIdController = async (req: Request, res: Response) => {
  try {
    const fileId: number = parseInt(req.params.id, 10);

    // Call the service function to get file access by file ID
    const fileAccess = await getFileAccessByFileId(fileId);

    if (!fileAccess) {
      return res.status(404).json({ message: 'File access not found for the specified file ID' });
    }

    res.status(200).json(fileAccess);
  } catch (error) {
    console.error('Error fetching file access by file ID:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};

// Controller function to update file access
const updateFileAccessController = async (req: Request, res: Response) => {
  try {
    const fileId: number = parseInt(req.params.id, 10);
    const { file_id, user_id, can_read, can_write, can_delete } = req.body;

    // Check if required fields are provided
    if (!file_id || !user_id || typeof can_read !== 'boolean' || typeof can_write !== 'boolean' || typeof can_delete !== 'boolean') {
      return res.status(400).json({ message: 'File ID, user ID, can_read, can_write, and can_delete are required' });
    }

    // Create file access object
    const updatedFileAccess: FileAccess = {
      id: fileId,
      file_id,
      user_id,
      can_read,
      can_write,
      can_delete,
    };

    // Call the service function to update file access
    await updateFileAccess(fileId, updatedFileAccess);

    res.status(200).json({ message: 'File access updated successfully' });
  } catch (error) {
    console.error('Error updating file access:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};

// Controller function to delete file access by ID
const deleteFileAccessByIdController = async (req: Request, res: Response) => {
  try {
    const fileId: number = parseInt(req.params.id, 10);

    // Call the service function to delete file access by ID
    await deleteFileAccessById(fileId);

    res.status(200).json({ message: 'File access deleted successfully' });
  } catch (error) {
    console.error('Error deleting file access:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};

export {
  createFileAccessController,
  getFileAccessByIdController,
  getFileAccessByFileIdController,
  updateFileAccessController,
  deleteFileAccessByIdController,
};
