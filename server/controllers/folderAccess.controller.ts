import { Request, Response } from 'express';
import { FolderAccess } from '../models/FolderAccess';
import {
  createFolderAccess,
  getFolderAccessById,
  getFolderAccessByFolderId,
  updateFolderAccess,
  deleteFolderAccessById,
} from '../services/folderAccess.service';

// Controller function to create folder access
const createFolderAccessController = async (req: Request, res: Response) => {
  try {
    const { folder_id, user_id, can_read, can_write, can_delete } = req.body;

    // Check if required fields are provided
    if (!folder_id || !user_id || typeof can_read !== 'boolean' || typeof can_write !== 'boolean' || typeof can_delete !== 'boolean') {
      return res.status(400).json({ message: 'Folder ID, user ID, can_read, can_write, and can_delete are required' });
    }

    // Create folder access object
    const newFolderAccess: FolderAccess = {
      id: 1, // Assuming the ID is autogenerated in the database
      folder_id,
      user_id,
      can_read,
      can_write,
      can_delete,
    };

    // Call the service function to create folder access
    await createFolderAccess(newFolderAccess);

    res.status(201).json({ message: 'Folder access created successfully' });
  } catch (error) {
    console.error('Error creating folder access:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};

// Controller function to get folder access by ID
const getFolderAccessByIdController = async (req: Request, res: Response) => {
  try {
    const folderAccessId: number = parseInt(req.params.id, 10);

    // Call the service function to get folder access by ID
    const folderAccess = await getFolderAccessById(folderAccessId);

    if (!folderAccess) {
      return res.status(404).json({ message: 'Folder access not found' });
    }

    res.status(200).json(folderAccess);
  } catch (error) {
    console.error('Error fetching folder access by ID:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};

// Controller function to get folder access by folder ID
const getFolderAccessByFolderIdController = async (req: Request, res: Response) => {
  try {
    const folderId: number = parseInt(req.params.id, 10);

    // Call the service function to get folder access by folder ID
    const folderAccess = await getFolderAccessByFolderId(folderId);

    if (!folderAccess) {
      return res.status(404).json({ message: 'Folder access not found for the specified folder ID' });
    }

    res.status(200).json(folderAccess);
  } catch (error) {
    console.error('Error fetching folder access by folder ID:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};

// Controller function to update folder access
const updateFolderAccessController = async (req: Request, res: Response) => {
  try {
    const folderAccessId: number = parseInt(req.params.id, 10);
    const { folder_id, user_id, can_read, can_write, can_delete } = req.body;

    // Check if required fields are provided
    if (!folder_id || !user_id || typeof can_read !== 'boolean' || typeof can_write !== 'boolean' || typeof can_delete !== 'boolean') {
      return res.status(400).json({ message: 'Folder ID, user ID, can_read, can_write, and can_delete are required' });
    }

    // Create folder access object
    const updatedFolderAccess: FolderAccess = {
      id: folderAccessId,
      folder_id,
      user_id,
      can_read,
      can_write,
      can_delete,
    };

    // Call the service function to update folder access
    await updateFolderAccess(folderAccessId, updatedFolderAccess);

    res.status(200).json({ message: 'Folder access updated successfully' });
  } catch (error) {
    console.error('Error updating folder access:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};

// Controller function to delete folder access by ID
const deleteFolderAccessByIdController = async (req: Request, res: Response) => {
  try {
    const folderAccessId: number = parseInt(req.params.id, 10);

    // Call the service function to delete folder access by ID
    await deleteFolderAccessById(folderAccessId);

    res.status(200).json({ message: 'Folder access deleted successfully' });
  } catch (error) {
    console.error('Error deleting folder access:', error);
    res.status(500).json({ message: 'Internal server error' });
  }
};

export {
  createFolderAccessController,
  getFolderAccessByIdController,
  getFolderAccessByFolderIdController,
  updateFolderAccessController,
  deleteFolderAccessByIdController,
};
